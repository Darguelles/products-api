{"version":3,"sources":["../src/ApiClient.js"],"names":["ApiClient","constructor","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","superagent","requestAgent","plugins","paramToString","param","undefined","Date","toJSON","canBeJsonified","JSON","stringify","toString","str","type","err","buildUrl","path","pathParams","apiBasePath","match","url","fullMatch","key","value","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","i","length","isFileParam","require","fs","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","authNames","forEach","authName","auth","username","password","accessToken","localVarBearerToken","set","apiKey","data","apiKeyPrefix","name","query","deserialize","response","returnType","status","body","Object","keys","text","convertToType","callApi","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","index","use","toUpperCase","getTime","send","querystring","_formParams","_formParamsValue","attach","file","field","header","accept","responseType","_attachCookies","withCredentials","Promise","resolve","reject","end","error","statusText","_saveCookies","parseDate","isNaN","parseInt","parseFloat","String","constructFromObject","itemType","item","keyType","valueType","k","result","hostSettings","getBasePathFromSettings","variables","servers","server","variable_name","variable","includes","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"mappings":"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","sourcesContent":["/**\n * Supply Chain API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 1\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nclass ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://ev5uwiczj6.execute-api.eu-central-1.amazonaws.com/test\n         */\n        this.basePath = 'https://ev5uwiczj6.execute-api.eu-central-1.amazonaws.com/test'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {\n            'User-Agent': 'OpenAPI-Generator/1/Javascript'\n        };\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n        if (ApiClient.canBeJsonified(param)) {\n            return JSON.stringify(param);\n        }\n\n        return param.toString();\n    }\n\n    /**\n    * Returns a boolean indicating if the parameter could be JSON.stringified\n    * @param param The actual parameter\n    * @returns {Boolean} Flag indicating if <code>param</code> can be JSON.stringified\n    */\n    static canBeJsonified(str) {\n        if (typeof str !== 'string' && typeof str !== 'object') return false;\n        try {\n            const type = str.toString();\n            return type === '[object Object]'\n                || type === '[object Array]';\n        } catch (err) {\n            return false;\n        }\n    };\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-\\.]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString, this).join(',');\n            case 'ssv':\n                return param.map(this.paramToString, this).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString, this).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString, this).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString, this);\n            case 'passthrough':\n                return param;\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        var localVarBearerToken = typeof auth.accessToken === 'function'\n                          ? auth.accessToken()\n                          : auth.accessToken\n                        request.set({'Authorization': 'Bearer ' + localVarBearerToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one\n    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    let _formParamsValue = _formParams[key];\n                    if (this.isFileParam(_formParamsValue)) {\n                        // file field\n                        request.attach(key, _formParamsValue);\n                    } else if (Array.isArray(_formParamsValue) && _formParamsValue.length\n                        && this.isFileParam(_formParamsValue[0])) {\n                        // multiple files\n                        _formParamsValue.forEach(file => request.attach(key, file));\n                    } else {\n                        request.field(key, _formParamsValue);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            if (!request.header['Content-Type']) {\n                request.type('application/json');\n            }\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            request.end((error, response) => {\n                if (error) {\n                    var err = {};\n                    if (response) {\n                        err.status = response.status;\n                        err.statusText = response.statusText;\n                        err.body = response.body;\n                        err.response = response;\n                    }\n                    err.error = error;\n\n                    reject(err);\n                } else {\n                    try {\n                        var data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n\n                        resolve({data, response});\n                    } catch (err) {\n                        reject(err);\n                    }\n                }\n            });\n        });\n\n    }\n\n    /**\n    * Parses an ISO-8601 string representation or epoch representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        if (isNaN(str)) {\n            return new Date(str.replace(/(\\d)(T)(\\d)/i, '$1 $3'));\n        }\n        return new Date(+str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"https://ev5uwiczj6.execute-api.eu-central-1.amazonaws.com/{basePath}\",\n              'description': \"No description provided\",\n              'variables': {\n                basePath: {\n                    'description': \"No description provided\",\n                    'default_value': \"test\",\n                  }\n                }\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                let variable = server['variables'][variable_name];\n                if ( !('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name]) ) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n"],"file":"ApiClient.js"}